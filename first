import re
import pandas as pd
import numpy as np
import copy
import decimal
outputFilename = 'C:/biaogezhuanyong/result1206.xlsx'#####定义输出
exported_alljob_path = r'C:/biaogezhuanyong/d.csv'##########定义打开文件
alljob = pd.read_csv(exported_alljob_path,encoding= 'gb18030') 
result = pd.DataFrame()
result1 = pd.DataFrame()
result2 = pd.DataFrame()
result3 = pd.DataFrame()

alljob_first=alljob[alljob['覆盖状态'].astype(str).str.contains('薄覆盖')]
alljob_first.loc[:,'街道路村'] = alljob_first.loc[:,'所属乡镇/街道'].str.cat(alljob_first['所属路/巷/行政村']).str.cat(alljob_first['所属小区/学校/自然村'])
                                      
alljob_first.loc[:,'街道路村楼单元层']  = alljob_first.loc[:,'街道路村'].str.cat(alljob_first['所属楼']).str.cat(alljob_first['所属单元']).str.cat(alljob_first['所属层'])

alljob_first.loc[:,'街道路村楼单元']  = alljob_first.loc[:,'街道路村'].str.cat(alljob_first['所属楼']).str.cat(alljob_first['所属单元'])
alljob_first.loc[:,'街道路村楼单元层房号'] = alljob_first.loc[:,'街道路村楼单元层'].str.cat(alljob_first['房号'])
#alljob_first.loc[:,'街道路村楼单元'] = alljob_first.loc[:,'街道路村'].str.cat(alljob_first['所属楼']).str.cat(alljob_first['所属单元'])
alljob_first.loc[:,'街道路村楼']  = alljob_first.loc[:,'街道路村'].str.cat(alljob_first['所属楼'])
col_chuli = ['所属乡镇/街道','所属路/巷/行政村','所属小区/学校/自然村',\
             '所属楼','所属单元','所属层','街道路村','街道路村楼',\
             '街道路村楼单元层','房号','街道路村楼单元','层号','街道路村楼单元层房号']
###房间号
alljob_new_first = pd.DataFrame(alljob_first,columns = col_chuli)
alljob_new_first.reset_index(inplace = True)
alljob_new_first.drop('index',axis=1,inplace=True)
alljob_new_first= alljob_new_first [~alljob_new_first["房号"].astype(str).str.contains('-')]
###层号

alljob_new_ceng = copy.deepcopy(alljob_new_first)
alljob_new_ceng.reset_index(inplace = True)
alljob_new_ceng.drop('index',axis=1,inplace=True)
alljob_new_ceng= alljob_new_ceng [~alljob_new_ceng["所属层"].astype(str).str.contains('-')]
#单元号
alljob_new_danyuan = copy.deepcopy(alljob_new_first)
alljob_new_ceng.reset_index(inplace = True)
alljob_new_ceng.drop('index',axis=1,inplace=True)
alljob_new_danyuan= alljob_new_danyuan [~alljob_new_danyuan["所属单元"].astype(str).str.contains('-')]
####楼号
alljob_new_louhao = copy.deepcopy(alljob_new_first)
alljob_new_louhao= alljob_new_louhao [~alljob_new_louhao["所属单元"].astype(str).str.contains('-')]


####房号专用，提出空值

number = []
def re_1(fanghao):
    res  = re .findall(r"\d+",fanghao)
    return res
number = alljob_new_first.apply(lambda x: re_1(x['房号']),axis=1)
alljob_new_first['房号2'] =number
alljob_new_first= alljob_new_first.loc[~alljob_new_first["房号2"].astype(str).str.contains(',')]
alljob_new_first =alljob_new_first[alljob_new_first['房号2'].str.len()> 0]
alljob_new_first.drop('房号2',axis=1,inplace=True)
alljob_new_first = alljob_new_first.drop_duplicates(subset = '街道路村楼单元层房号',keep='first',inplace = False)
alljob_new_first.drop('街道路村楼单元层房号',axis=1,inplace=True)
# ####层号专用，剔除空值####
number2 = []
def re_ceng(cenghao):
    res_ceng  = re .findall(r"\d+",str(cenghao))
    return res_ceng
number2 = alljob_new_ceng.apply(lambda x: re_ceng(x['所属层']),axis=1)
alljob_new_ceng['层号'] = number2
#alljob_new_ceng= alljob_new_ceng.loc[~alljob_new_ceng["层号"].astype(str).str.contains(',')]
alljob_new_ceng =alljob_new_ceng.loc[alljob_new_ceng['层号'].str.len()> 0]
alljob_new_ceng = alljob_new_ceng.drop_duplicates(subset = '街道路村楼单元层',keep='first',inplace = False)
alljob_new_ceng.reset_index(inplace = True)
alljob_new_ceng.drop('index',axis=1,inplace=True)
####################单元专用####
number3 = []
def re_danyuan(danyuan):
    re_danyuan  = re .findall(r"\d+",str(danyuan))
    return re_danyuan
number3 = alljob_new_danyuan.apply(lambda x: re_ceng(x['所属单元']),axis=1)
alljob_new_danyuan['单元号'] = number3
alljob_new_danyuan =alljob_new_danyuan.loc[alljob_new_danyuan['单元号'].str.len()> 0]
alljob_new_danyuan = alljob_new_danyuan.drop_duplicates(subset = '街道路村楼单元',keep='first',inplace = False)
alljob_new_danyuan.drop('层号',axis=1,inplace=True)
alljob_new_danyuan.reset_index(inplace = True)
alljob_new_danyuan.drop('index',axis=1,inplace=True)
#####楼号专用
number4 = []
def re_louhao(louhao):
    re_louhao  = re .findall(r"\d+",str(louhao))
    return re_louhao
number4 = alljob_new_louhao.apply(lambda x: re_ceng(x['所属楼']),axis=1)
alljob_new_louhao['楼号'] = number4
alljob_new_louhao =alljob_new_louhao.loc[alljob_new_louhao['楼号'].str.len()> 0]
alljob_new_louhao = alljob_new_louhao.drop_duplicates(subset = '街道路村楼',keep='first',inplace = False)
alljob_new_louhao.drop('层号',axis=1,inplace=True)
alljob_new_louhao.reset_index(inplace = True)
alljob_new_louhao.drop('index',axis=1,inplace=True)

######循环主题
####################查找缺失的房号###########################
loop1 = list(set(alljob_new_first['街道路村楼单元层'].tolist()))
for ls in ['loc','miss']:
     locals()[ls] = []
#####for循环，在同一楼单元层里查找缺失的房号################
for xiaoqu  in  loop1:
    lk = list(set(alljob_new_first.loc[alljob_new_first['街道路村楼单元层']==xiaoqu]['房号'].tolist()))
    tmp = []
    for i in lk:
        t = re.sub('\D', '' , i)
        tmp.append(t)
    tmp = list(set(tmp))
 
    if len(tmp) < 2:
        locals()['loc'].append(f'{xiaoqu}')
        if int(tmp[0][-1]) == 1:
            m = tmp[0][0:-1]+'2'
        elif int(tmp[0][-1]) == 2:
            m = tmp [0][0:2]+'1'
        elif int(tmp[0][-1]) == 3:
            m = tmp [0][0:2]+'1,2'
        elif int(tmp[0][-1]) == 4:
            m = tmp [0][0:2]+'1,2,3'
        else:
            m = tmp [0][0:2]+'超出范围'   
        locals()['miss'].append(m)
    if len(tmp) > 2:
        contrast = []
        locals()['loc'].append(f'{xiaoqu}')

        for i in range(int(min([decimal.Decimal(b) for b in tmp])),int(max([decimal.Decimal(b) for b in tmp]))):
              contrast.append(i)
        m = list(set(contrast) - set(decimal.Decimal(b) for b in tmp))
        locals()['miss'].append(list(set(m)))    
result['缺失地址'] = locals()['loc']
result['缺失房号'] = locals()['miss']
result =result.loc[result['缺失房号'].str.len()> 0] 

alljob_new_first.drop('层号',axis=1,inplace=True)
alljob_new_first.drop('街道路村楼单元',axis=1,inplace=True)
alljob_new_first.drop('街道路村楼',axis=1,inplace=True)

#################查找缺失的楼层#######################
loop_2 = list(set(alljob_new_ceng['街道路村楼单元'].tolist()))

for ls_2 in ['loc_ceng','miss_ceng']:
        locals()[ls_2] = []

for louceng in loop_2:
        lc = list(set(alljob_new_ceng.loc[alljob_new_ceng['街道路村楼单元']==louceng]['所属层'].tolist()))
        tmp_2 = []
        for i_2 in lc:
            t_2 = re.sub('\D','',i_2)
            tmp_2.append(t_2)
        tmp_2 = list(set(tmp_2))

        if len(tmp_2) < 2:
            locals()['loc_ceng'].append(f'{louceng}')
            if int(tmp_2[0][-1]) == 2:
                m_2 = tmp_2[0][0:-1]+'1'  
            elif int(tmp_2[0][-1]) == 3:
                m_2 = tmp_2[0][0:-1]+'1,2'
            elif int(tmp_2[0][-1]) == 1:
                 m_2 = tmp_2[0][0:-1]+'没有缺失楼层'
            elif int(tmp_2[0][-1]) == 4:
                m_2 = tmp_2[0][0:-1]+'1,2,3'
            elif int(tmp_2[0][-1]) == 5:
                m_2 = tmp_2[0][0:-1]+'1,2,3,4'
            elif int(tmp_2[0][-1]) == 6:
                m_2 = tmp_2[0][0:-1]+'1,2,3,4,5'
            elif int(tmp_2[0][-1]) == 7:
                m_2 = tmp_2[0][0:-1]+'1,2,3,4,5,6'
            else:
                m2= '超出范围'
            locals()['miss_ceng'].append(m_2)
    
        if len(tmp_2) > 2:
            contrast_2 = []
            locals()['loc_ceng'].append(f'{louceng}')
            tmp_2_max = int(max([decimal.Decimal(b) for b in tmp_2]))+1
            tmp_2_min = int(min([decimal.Decimal(b) for b in tmp_2]))
            for i_2 in range(tmp_2_min,tmp_2_max):
                   contrast_2.append(i_2)
            m_2 = list(set(contrast_2) - set(decimal.Decimal(b) for b in tmp_2))
            locals()['miss_ceng'].append(list(set(m_2)))   
            
     

result1['地址']  = locals()['loc_ceng']
result1['缺失层号'] = locals()['miss_ceng']
result1 =result1.loc[result1['缺失层号'].str.len()> 0] 
alljob_new_ceng.drop('房号',axis=1,inplace=True)
alljob_new_ceng.drop('街道路村楼单元层房号',axis=1,inplace=True)
alljob_new_ceng.drop('街道路村楼',axis=1,inplace=True)
result1= result1 [~result1["缺失层号"].astype(str).str.contains('没有缺失楼层')]


# #################查找缺失的单元#######################
loop_3 = list(set(alljob_new_danyuan['街道路村楼'].tolist()))

for ls_3 in ['loc_danyuan','miss_danyuan']:
        locals()[ls_3] = []

for danyuan in loop_3:
        dy = list(set(alljob_new_danyuan.loc[alljob_new_danyuan['街道路村楼']==danyuan]['所属单元']))
        tmp_3 = []
        for i_3 in dy:
            t_3 = re.sub('\D','',i_3)
            tmp_3.append(t_3)
        tmp_3 = list(set(tmp_3))

        if len(tmp_3) < 2:
            locals()['loc_danyuan'].append(f'{danyuan}')
            if int(tmp_3[0][-1]) == 2:
                m_3 = tmp_3[0][0:-1]+'1'  
            elif int(tmp_3[0][-1]) == 3:
                m_3 = tmp_3[0][0:-1]+'1,2'
            elif int(tmp_3[0][-1]) == 1:
                 m_3 = tmp_3[0][0:-1]+'2'
            elif int(tmp_3[0][-1]) == 4:
                m_3 = tmp_3[0][0:-1]+'1,2,3'
            else:
                m_3 = '超出范围'
            locals()['miss_danyuan'].append(m_3)
    
        if len(tmp_3) > 2:
            contrast_3 = []
            locals()['loc_danyuan'].append(f'{danyuan}')
            tmp_3_max = int(max([decimal.Decimal(b) for b in tmp_3]))+1
            tmp_3_min = int(min([decimal.Decimal(b) for b in tmp_3]))
            for i_3 in range(tmp_3_min,tmp_3_max):
                   contrast_3.append(i_3)
            m_3 = list(set(contrast_3) - set(decimal.Decimal(b) for b in tmp_3))
            locals()['miss_danyuan'].append(list(set(m_3))) 
            
result2['地址'] = locals()['loc_danyuan']
result2['缺失单元'] = locals()['miss_danyuan']
result2 =result2.loc[result2['缺失单元'].str.len()> 0]   ####筛选掉空list
alljob_new_danyuan.drop('房号',axis=1,inplace=True)
alljob_new_danyuan.drop('街道路村楼单元层房号',axis=1,inplace=True)
alljob_new_danyuan.drop('街道路村楼单元层',axis=1,inplace=True)
#######查找缺失的楼号
loop_4 = list(set(alljob_new_louhao['街道路村'].tolist()))

for ls_4 in ['loc_louhao','miss_louhao']:
        locals()[ls_4] = []

for louhao in loop_4:
        lh = list(set(alljob_new_louhao.loc[alljob_new_louhao['街道路村']==louhao]['所属楼']))
        tmp_4 = []
        for i_4 in lh:
            t_4 = re.sub('\D','',i_4)
            tmp_4.append(t_4)
        tmp_4 = list(set(tmp_4))

        if len(tmp_4) < 2:
            locals()['loc_louhao'].append(f'{louhao}')
            if int(tmp_4[0][-1]) == 2:
                m_4 = tmp_4[0][0:-1]+'1'                                              
            elif int(tmp_4[0][-1]) == 3:
                m_4 = tmp_4[0][0:-1]+'1,2'
            elif int(tmp_4[0][-1]) == 1:
                 m_4 = tmp_4[0][0:-1]+'没有缺失楼号'
            elif int(tmp_4[0][-1]) == 4:
                m_4 = tmp_4[0][0:-1]+'1,2,3'
            elif int(tmp_4[0][-1]) == 5:
                m_4 = tmp_4[0][0:-1]+'1,2,3,4'    
            else:
                m_4 = '超出范围'
            locals()['miss_louhao'].append(m_4)
    
        if len(tmp_4) > 2:
            contrast_4 = []
            locals()['loc_louhao'].append(f'{louhao}')
            tmp_4_max = int(max([decimal.Decimal(b) for b in tmp_4]))+1
            tmp_4_min = int(min([decimal.Decimal(b) for b in tmp_4]))
            for i_4 in range(tmp_4_min,tmp_4_max):
                   contrast_4.append(i_4)
            m_4 = list(set(contrast_4) - set(decimal.Decimal(b) for b in tmp_4))
            locals()['miss_louhao'].append(list(set(m_4))) 
            
result3['地址'] = locals()['loc_louhao']
result3['缺失楼号'] = locals()['miss_louhao']
result3 =result3.loc[result3['缺失楼号'].str.len()> 0]   ####筛选掉空list
alljob_new_louhao.drop('房号',axis=1,inplace=True)
alljob_new_louhao.drop('街道路村楼单元层房号',axis=1,inplace=True)
alljob_new_louhao.drop('街道路村楼单元层',axis=1,inplace=True)
result1= result1 [~result1["缺失层号"].astype(str).str.contains('没有缺失楼号')]
################FTTH和FTTB相同的地址进行筛选
# alljob_second=alljob[alljob['覆盖状态'].astype(str).str.contains('薄覆盖')]
# alljob_second.loc[:,'街道路村'] = alljob_second.loc[:,'所属乡镇/街道'].\
# str.cat(alljob_second['所属路/巷/行政村']).str.cat(alljob_second['所属小区/学校/自然村'])
                                      
# alljob_second.loc[:,'街道路村楼单元层']  = alljob_second.loc[:,'街道路村'].\
# str.cat(alljob_second['所属楼']).str.cat(alljob_second['所属单元']).str.cat(alljob_second['所属层'])

# alljob_second.loc[:,'街道路村楼单元层房号'] = alljob_second.loc[:,'街道路村楼单元层'].str.cat(alljob_second['房号'])
# col_chuli_second = ['所属乡镇/街道','所属路/巷/行政村','所属小区/学校/自然村',\
#              '所属楼','所属单元','所属层','接入类型','街道路村楼单元层房号']

# alljob_new_second = pd.DataFrame(alljob_second,columns = col_chuli_second)
# alljob_new_second.reset_index(inplace = True)
# alljob_new_second.drop('index',axis=1,inplace=True)
# #alljob_new_first= alljob_new_first [~alljob_new_first["房号"].astype(str).str.contains('-')]


# alljob_new_second_ftth=alljob_new_second[alljob_new_second['接入类型'].astype(str).str.contains('FTTH')]
# alljob_new_second_fttb=alljob_new_second[alljob_new_second['接入类型'].astype(str).str.contains('FTTH')]


writer = pd.ExcelWriter(outputFilename,engine = 'xlsxwriter')
alljob_new_first.to_excel(writer,sheet_name='房号总表',index=True)
result.to_excel(writer,sheet_name='缺失房号',index=False)
alljob_new_ceng.to_excel(writer,sheet_name='层号总表',index=True)
result1.to_excel(writer,sheet_name='缺失楼层',index=False)

alljob_new_danyuan.to_excel(writer,sheet_name='单元总表',index=True)
result2.to_excel(writer,sheet_name='缺失单元',index=False)

alljob_new_louhao.to_excel(writer,sheet_name='楼号地址',index=True)
result3.to_excel(writer,sheet_name='缺失楼号',index=False)

writer.save()
